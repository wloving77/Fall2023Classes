mutate(
grades5 = ifelse(Weighted_Average >= 95, "A",
ifelse(Weighted_Average>=90, "A-",
ifelse(Weighted_Average>=87,"B+",
ifelse(Weighted_Average>=83,"B",                                        ifelse(Weighted_Average>=80,"B-","F"))))))
head(grades5)
grades5 = grades4%>%
mutate(
Grade = ifelse(Weighted_Average >= 95, "A",
ifelse(Weighted_Average>=90, "A-",
ifelse(Weighted_Average>=87,"B+",
ifelse(Weighted_Average>=83,"B",                                        ifelse(Weighted_Average>=80,"B-","F"))))))
head(grades5)
grades2 <- grades%>%
mutate(Quiz_Average = (Quiz1 + Quiz2 + Quiz3)/3)
head(grades2)
library(dplyr)
grades<-data.frame(Student_ID=c("Student1","Student2", "Student3","Student4", "Student5"),
Quiz1=c(80,100,"-",95,100),
Quiz2=as.factor(c(90,100,95,90,82)),
Quiz3=c("-",100,90,100,100),
Midterm_Project=c(98,100,95,93,90),
Final_Project=c(95,92,95,100,90))
grades$Quiz1 = as.numeric(grades$Quiz1)
library(dplyr)
grades<-data.frame(Student_ID=c("Student1","Student2", "Student3","Student4", "Student5"),
Quiz1=c(80,100,"-",95,100),
Quiz2=as.factor(c(90,100,95,90,82)),
Quiz3=c("-",100,90,100,100),
Midterm_Project=c(98,100,95,93,90),
Final_Project=c(95,92,95,100,90))
grades$Quiz1 <- replace(grades$Quiz1, is.na(grades$Quiz1), 0)
grades$Quiz1 = as.numeric(grades$Quiz1)
head(grades1)
head(grades)
grades$Quiz1 = as.numeric(grades$Quiz1)
grades$Quiz1 <- replace(grades$Quiz1, is.na(grades$Quiz1), 0)
head(grades)
grades$Quiz3[grades$Student_ID == "Student1"] <- 85
grades$Quiz3 <- as.numeric(grades$Quiz3)
grades$Quiz2 <- as.numeric(grades$Quiz2)
grades2 <- grades
head(grades2)
grades3 <- grades2%>%
mutate(Quiz_Average = (Quiz1 + Quiz2 + Quiz3)/3)
head(grades3)
grades4 <- grades3
grades4$Weighted_Average <- grades4$Quiz_Average * 0.35 + grades4$Midterm_Project * 0.3 + grades$Final_Project*0.35
head(grades4)
grades5 <- grades4
grades5 = grades4%>%
mutate(
Grade = ifelse(Weighted_Average >= 95, "A",
ifelse(Weighted_Average>=90, "A-",
ifelse(Weighted_Average>=87,"B+",
ifelse(Weighted_Average>=83,"B",                                        ifelse(Weighted_Average>=80,"B-","F"))))))
head(grades5)
grades5 <- grades4
grades5 = grades4%>%
mutate(
Grade = ifelse(Weighted_Average >= 95, "A",
ifelse(Weighted_Average>=90, "A-",
ifelse(Weighted_Average>=87,"B+",
ifelse(Weighted_Average>=83,"B",
ifelse(Weighted_Average>=80,"B-","F"))))))
head(grades5)
grades4 <- grades3
grades4$Weighted_Average <- (grades4$Quiz_Average * 0.35) + (grades4$Midterm_Project * 0.3) + (grades$Final_Project*0.35)
head(grades4)
grades$Quiz2 = as.character(grades$Quiz2)
grades$Quiz2 <- as.numeric(grades$Quiz2)
# import packages
library(tidyverse) #ggplot2 is part of the tidyverse
(mtcars)
# Basic scatter plot with 1 geom (Continuous Variable)
ggplot(mtcars,               #data source
aes(x = wt,           # mapping wt to x
y = mpg)) +       # mapping mpg to y
geom_point()               # add geom layer
?geom_point()
# Basic scatter plot with 2 geoms
ggplot(mtcars,
aes(x = wt,
y = mpg)) +
geom_point() +
geom_smooth()
? geom_smooth()
data <- read.csv("../data/income.csv")
ggplot(data,
aes(x=age,y=income)) +
geom_point() +
geom_smooth()
ggplot(data,
aes(x=age,y=income)) +
geom_point() +
```
ggplot(data,
aes(x=age,y=income)) +
geom_point()
ggplot(data,
aes(x=age,y=income)) +
geom_point() + geom_smooth()
# base layer
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = cyl)) +
geom_point()
# geom layer
ggplot(mtcars,
aes(x = wt,
y = mpg)) +
geom_point(aes(color = cyl))
str(mtcars$cyl)
# geom layer
ggplot(mtcars,
aes(x = wt,
y = mpg)) +
geom_point(aes(color = cyl))
# Convert cyl from numeric to factor
mtcars$fcyl <- as.factor(mtcars$cyl)
unique(mtcars$cyl)
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +
geom_point()
# Color refers to the outline of the shape.
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +
geom_point(shape = 1) # shape is being used as an attribute (will effect all markers the homogeneously)
# An exception is point markers. Instead of fill, use color to change the inside color
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +
geom_point()
# Fill refers to the inside color
ggplot(mtcars,
aes(x = wt,
y = mpg,
fill = fcyl)) +
geom_point(shape = 24)
# Color refers to the outline of the shape.
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +
geom_point(shape = 2) # shape is being used as an attribute (will effect all markers the homogeneously)
# Color refers to the outline of the shape.
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +
geom_point(shape = 45) # shape is being used as an attribute (will effect all markers the homogeneously)
# Color refers to the outline of the shape.
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +
geom_point(shape = 10) # shape is being used as an attribute (will effect all markers the homogeneously)
# Color refers to the outline of the shape.
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +
geom_point(shape = 1) # shape is being used as an attribute (will effect all markers the homogeneously)
# Color refers to the outline of the shape.
ggplot(mtcars,
aes(x = wt,
y = mpg,
fill = fcyl)) +
geom_point(shape = 1) # shape is being used as an attribute (will effect all markers the homogeneously)
# Color refers to the outline of the shape.
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +
geom_point(shape = 1) # shape is being used as an attribute (will effect all markers the homogeneously)
# Color refers to the outline of the shape.
ggplot(mtcars,
aes(x = wt,
y = mpg,
fill = fcyl)) +
geom_point(shape = 1) # shape is being used as an attribute (will effect all markers the homogeneously)
# Color refers to the outline of the shape.
ggplot(mtcars,
aes(x = wt,
y = mpg,
fill = fcyl)) +
geom_point(shape = 24) # shape is being used as an attribute (will effect all markers the homogeneously)
# Color refers to the outline of the shape.
ggplot(mtcars,
aes(x = wt,
y = mpg,
fill = fcyl)) +
geom_point(shape = 10) # shape is being used as an attribute (will effect all markers the homogeneously)
# Color refers to the outline of the shape.
ggplot(mtcars,
aes(x = wt,
y = mpg,
fill = fcyl)) +
geom_point(shape = 5) # shape is being used as an attribute (will effect all markers the homogeneously)
# Color refers to the outline of the shape.
ggplot(mtcars,
aes(x = wt,
y = mpg,
fill = fcyl)) +
geom_point(shape = 24) # shape is being used as an attribute (will effect all markers the homogeneously)
# Color refers to the outline of the shape.
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +
geom_point(shape = 24) # shape is being used as an attribute (will effect all markers the homogeneously)
# Some shapes allow color and fill
ggplot(mtcars,
aes(x = wt,
y = mpg,
fill = fcyl)) +
geom_point(shape = 21, color  = 'white', size = 12)
ggplot(data, aes(x=age, y=income, color=as.factor(data$edu)))
data$fedu <- as.factor(data$edu)
ggplot(data, aes(x=age, y=income, color=fedu))
ggplot(data, aes(x=age, y=income))
ggplot(data, aes(x=age, y=income, colo=fedu)) + geom_point()
ggplot(data, aes(x=age, y=income, colo=fedu)) + geom_point() + geom_smooth()
ggplot(data, aes(x=age, y=income, color=fedu)) + geom_point() + geom_smooth()
ggplot(data, aes(x=age, y=income, color=fedu)) +
geom_point() +
geom_smooth()
ggplot(mtcars,
aes(x = wt,
y = mpg,
shape = fcyl)) +
geom_point()
# change shape and color by fcyl (although this is redundant information)
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +
geom_point(aes(shape = fcyl))
data$fsex <- as.factor(data$sex)
ggplot(data, aes(x=age,y=income, shape=fsex)) +
geom_point() +
geom_smooth()
ggplot(data, aes(x=age,y=income, color=fsex)) +
geom_point() +
geom_smooth()
ggplot(data, aes(x=age,y=income, shape=fsex)) +
geom_point() +
geom_smooth(aes(color=fsex))
ggplot(data, aes(x=age,y=income, shape=fsex)) +
geom_point(aes(color=fsex)) +
geom_smooth(aes(color=fsex))
# to change marker size overall, use size argument as attribute
ggplot(mtcars,
aes(x = wt,
y = mpg,
fill = fcyl)) +
geom_point(shape = 21, color  = 'white', size = 12)
# To change marker size dependent on variable info, place inside aesthetics mapping.
ggplot(mtcars,
aes(x = wt,
y = mpg,
size = fcyl)) +
geom_point()
# To change marker size dependent on variable info, place inside aesthetics mapping.
ggplot(mtcars,
aes(x = wt,
y = mpg,
size = fcyl, shape=fcyl, color=fcyl)) +
geom_point()
# To change marker size dependent on variable info, place inside aesthetics mapping.
ggplot(mtcars,
aes(x = wt,
y = mpg,
size = fcyl)) +
geom_point()
# inside aesthetics mapping, transparency will be determined by variable
ggplot(mtcars,
aes(x = wt,
y = mpg,
alpha = fcyl)) +
geom_point()
# as attribute, all markers will be made the same transparency
ggplot(income, aes(age, income, color = fedu)) +
geom_point(alpha = .6)
# as attribute, all markers will be made the same transparency
ggplot(data, aes(age, income, color = fedu)) +
geom_point(alpha = .6)
# in aesthetic layer
ggplot(mtcars,
aes(x = wt,
y = mpg,
linetype = fcyl)) +
geom_line()                   # Note change in geom layer
# as an attribute
ggplot(mtcars,
aes(x = wt,
y = mpg )) +
geom_line(linetype = 'dashed')
ggplot(mtcars,
aes(x = wt,
y = mpg,
label = fcyl)) +
geom_text()                 # Note change in geom layer
ggplot(data, aes(x=age, y=income, size=fedu, color=fsex)) +
geom_plot()
ggplot(data, aes(x=age, y=income, size=fedu, color=fsex)) +
geom_point()
ggplot(data, aes(x=age, y=income, size=fedu, color=fsex alpha=0.6)) +
ggplot(data, aes(x=age, y=income, size=fedu, color=fsex, alpha=0.6)) +
geom_point()
geom_smooth()
ggplot(data, aes(x=age, y=income, size=fedu, color=fsex, alpha=0.6)) +
geom_point()
ggplot(data, aes(x=age, y=income, size=fedu, color=fsex, alpha=0.6)) +
geom_point() +
geom_smooth()
ggplot(data, aes(x=age, y=income, size=fedu, color=fsex, alpha=0.6)) +
geom_point()
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +  # aesthetic
geom_point() +
geom_smooth(color = 'pink', fill = 'white') # attribute
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +  # aesthetic
geom_point() +
geom_smooth(color = '#2A9D8F', fill = '#FFFFFF') # attribute
my_color = '#2A9D8F'
my_fill = '#FFFFFF'
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +  # aesthetic
geom_point() +
geom_smooth(color = my_color, fill = my_fill) # attribute
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +  # aesthetic
geom_point(size = 10) +  # attribute
geom_smooth(color = my_color, fill = my_fill) # attribute
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +  # aesthetic
geom_point(size = 10, alpha = 0.4) +  # attribute
geom_smooth(color = my_color, fill = my_fill) # attribute
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +  # aesthetic
geom_point(size = 10, alpha = 0.4) +  # attribute
geom_smooth(color = my_color, fill = my_fill, linetype = 'dashed') # attribute
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +  # aesthetic
geom_point(size = 10, alpha = 0.4) +  # attribute
geom_smooth(color = my_color, fill = my_fill, linetype = 'dashed') +  # attribute
geom_text(label = rownames(mtcars), size = 3) # attribute
# labeling titles, y-axis, x-axis
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +  # aesthetic
geom_point(size = 10, alpha = 0.4) +  # attribute
geom_smooth(color = my_color, fill = my_fill, linetype = 'dashed') +  # attribute
geom_text(label = rownames(mtcars), size = 3) + # attribute
labs(
title = 'MTCARS',
subtitle = 'DS2003',
caption = 'making charts is fun') +
ylab('Miles per Gallon (MPG)') +
xlab('Weight (Tons)')
# labeling titles, y-axis, x-axis
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +  # aesthetic
geom_point(size = 10, alpha = 0.4) +  # attribute
geom_smooth(color = my_color, fill = my_fill, linetype = 'dashed') +  # attribute
geom_text(label = rownames(mtcars), size = 10) + # attribute
labs(
title = 'MTCARS',
subtitle = 'DS2003',
caption = 'making charts is fun') +
ylab('Miles per Gallon (MPG)') +
xlab('Weight (Tons)')
# labeling titles, y-axis, x-axis
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +  # aesthetic
geom_point(size = 10, alpha = 0.4) +  # attribute
geom_smooth(color = my_color, fill = my_fill, linetype = 'dashed') +  # attribute
geom_text(label = rownames(mtcars), size = 2) + # attribute
labs(
title = 'MTCARS',
subtitle = 'DS2003',
caption = 'making charts is fun') +
ylab('Miles per Gallon (MPG)') +
xlab('Weight (Tons)')
# labeling legend, using tag
ggplot(mtcars,
aes(x = wt,
y = mpg,
color = fcyl)) +  # aesthetic
geom_point(size = 10, alpha = 0.4) +  # attribute
geom_smooth(color = my_color, fill = my_fill, linetype = 'dashed') +  # attribute
geom_text(label = rownames(mtcars), size = 3) + # attribute
labs(
title = 'MTCARS',
subtitle = 'DS2003',
caption = 'making charts is fun') +
ylab('Miles per Gallon (MPG)') +
xlab('Weight (Tons)') +
labs(color = 'Cylinders', tag = 'A')
# position = 'identity' is default
ggplot(iris,     # new dataset
aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point(position = 'identity') # in practice, don't need to specify default
# Jitter
ggplot(iris,     # new dataset
aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point(position = 'jitter')
preset_jitter <- position_jitter (0.1, seed = 123) # how much noise
ggplot(iris,     # new dataset
aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point(position = preset_jitter)
ggplot(iris,     # new dataset
aes(Sepal.Length,
fill = Species)) +
geom_bar()
ggplot(iris,     # new dataset
aes(Sepal.Length,
fill = Species)) +
geom_bar(position = 'dodge')
# x-axis limits
ggplot(iris,
aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point(position = preset_jitter) +
xlim(5, 7)
# Reverse axis
ggplot(iris,
aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point(position = preset_jitter) +
xlim(7, 5)
# y-axis limits
ggplot(iris,
aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point(position = preset_jitter) +
ylim(2.5, 4)
# color scales
ggplot(iris,
aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point(position = preset_jitter) +
scale_colour_brewer()
ggplot(mtcars, aes(fcyl)) +
geom_bar() # counts the number of cases at each x position
mtcars %>%
select(fcyl, wt) %>%
gather(key, value, -fcyl) %>%
group_by(fcyl) %>%
summarise(avg = mean(value),
sd = sd(value)) -> mtcars_summary_long
mtcars %>%
select(fcyl, wt) %>%
gather(key, value, -fcyl) %>%
group_by(fcyl) %>%
summarise(avg = mean(value),
sd = sd(value)) -> mtcars_summary_long
mtcars_summary_long
# Bar Graphs
# geom_col()
ggplot(mtcars_summary_long, aes(fcyl, avg)) +
geom_col() + # plots actual values
geom_errorbar(aes(ymin = avg - sd,
ymax = avg + sd),
width = 0.1,
color = 'orange')
#Bar Graph
# stat_count() - similar to geom_bar()
ggplot(mtcars, aes(fcyl)) +
stat_count()
ggplot(data, aes(fedu)) +
stat_count()
#boxplot
ggplot(mtcars, aes(fcyl, mpg)) +
geom_boxplot()

knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE)
library(knitr)
library(tidyverse)
library(plotly)
library(foreign)
library(readr)
data <- read_csv("./data/WHO-COVID-19-global-data.csv")
library(shiny)
library(shiny)
library(dplyr)
ui <- fluidPage(
selectInput("Region", "Select a WHO Region", choices=unique(data$WHO_region)),
plotOutput("barplot")
)
server <- function(input, output) {
output$barplot <- renderPlot({
selectedRegion <- input$Region
selectedData <- data %>%
filter(WHO_region == selectedRegion) %>%
group_by(Country) %>%
summarize(rate = mean((New_deaths - Cumulative_deaths) / (New_cases - Cumulative_cases), na.rm = TRUE))
preparedData <- selectedData %>%
top_n(3, rate)
ggplot(preparedData, aes(x=Country, y=rate, fill=Country)) +
geom_bar(stat="identity") +
labs(
x= paste("Top 3 Covid Death Rate Countries in ",selectedRegion),
y="Covid Death Rate",
title=paste("Top 3 Covid Death Rates in ",selectedRegion)
)
})
}
shinyApp(ui, server)
View(data)
data_mcdonalds <- read.csv("./data/mcdonalds_dataset.csv")
data_mcdonalds_clean <- data_mcdonalds %>%
mutate(product_calories = as.numeric(sub(".*: ", "", product_calories)))
data_mcdonalds_clean <- data_mcdonalds_clean %>%
mutate(product_price = as.numeric(sub("Â£ ?", "", product_price)))
data_mcdonalds_final <- na.omit(data_mcdonalds_clean)
ui <- fluidPage(
titlePanel("Interactive Scatterplot with Loess Line"),
sidebarLayout(
sidebarPanel(
sliderInput("span", "Span Value:", min = 0.2, max = 0.9, value = 0.5),
selectInput("degree", "Degree:", choices = c(0, 1, 2), selected = 1)
),
mainPanel(
plotOutput("scatterplot")
)
)
)
server <- function(input, output) {
output$scatterplot <- renderPlot({
degree <- input$degree
span <- input$span
# Create the scatterplot with a loess line
ggplot(data_mcdonalds_final, aes(x = product_price, y = product_calories)) +
geom_point() +
geom_smooth(method = "loess", formula = y ~ x, degree = degree, span = span) +
labs(
title = "Scatterplot with Loess Line Of Product Price by Product Calories at Mcdonalds",
x = "Product Price",
y = "Product Calories"
)
})
}
shinyApp(ui, server)
library(readr)
data <- read_csv("./data/WHO-COVID-19-global-data.csv")
data <- read_csv("./data/WHO-COVID-19-global-data.csv")
View(data)
library(shiny)
library(dplyr)
library(dplyr)
ui <- fluidPage(
selectInput("Region", "Select a WHO Region", choices=unique(data$WHO_region)),
plotOutput("barplot")
)
server <- function(input, output) {
output$barplot <- renderPlot({
selectedRegion <- input$Region
selectedData <- data %>%
filter(WHO_region == selectedRegion) %>%
group_by(Country) %>%
summarize(rate = mean((New_deaths - Cumulative_deaths) / (New_cases - Cumulative_cases), na.rm = TRUE))
preparedData <- selectedData %>%
top_n(3, rate)
ggplot(preparedData, aes(x=Country, y=rate, fill=Country)) +
geom_bar(stat="identity") +
labs(
x= paste("Top 3 Covid Death Rate Countries in ",selectedRegion),
y="Covid Death Rate",
title=paste("Top 3 Covid Death Rates in ",selectedRegion)
)
})
}
shinyApp(ui, server)
